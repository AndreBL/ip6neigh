#!/bin/sh

##################################################################################
#
#  Copyright (C) 2016 André Lange & Craig Miller
#
#  See the file "LICENSE" for information on usage and redistribution
#  of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#  Distributed under GPLv2 License
#
##################################################################################


#	Script to command and display information gathered by ip6neigh.
#	Script is called by luci-app-command for a web interface, or can be run directly.
#
#	by André Lange & Craig Miller	Jan 2017

readonly HOSTS_FILE="/tmp/hosts/ip6neigh"
readonly CACHE_FILE="/tmp/ip6neigh.cache"
readonly SERVICE_NAME="ip6neigh-svc.sh"


#Display help text
display_help() {
	echo "ip6neigh Command Line Script"
	echo -e
	echo -e "Usage: $CMD COMMAND ..."
	echo -e
	echo -e "Command list:"
	echo -e "\t{ start | restart|rst | stop }"
	echo -e "\t{ enable | disable }"
	echo -e "\tlist|lst\t[ all | sta[tic] | dis[covered] ]"
	echo -e "\taddr[ess]\t{ NAME } [ 1 ]"
	echo -e "\tname\t\t{ ADDRESS }"
	echo -e "\tres[olve]\t{ ADDRESS | NAME } [ 1 ]"
	echo -e "\twho[is|s]\t{ NAME | ADDRESS | MAC }"
	echo -e
	exit 1
}

#Checks if the init.d script is enabled.
check_enabled() {
	if ! /etc/init.d/ip6neigh enabled ; then
		>&2 echo "The service is not enabled. Enable it with:"
		>&2 echo -e
		>&2 echo " $CMD enable"
		exit 3
	fi
	return 0
}

#Returns SUCCESS if the service is running.
is_running() {
	pgrep -f "$SERVICE_NAME" >/dev/null
	return "$?"
}

#Checks if the service is running.
check_running() {
	if ! is_running; then
		>&2 echo "The service is not running."
		exit 2
	fi
	return 0
}

#Checks if hosts and cache files exist.
check_files() {
	[ -f "$HOSTS_FILE" ] && [ -f "$CACHE_FILE" ] && return 0
	exit 2
}

#init.d shortcut commands
start_service() {
	if is_running; then
		>&2 echo "The service is already running."
		exit 2
	fi
	check_enabled && /etc/init.d/ip6neigh start
}
stop_service() {
	check_running && /etc/init.d/ip6neigh stop
}
restart_service() {
	check_enabled && /etc/init.d/ip6neigh restart
}
enable_service() {
	/etc/init.d/ip6neigh enable
}
disable_service() {
	/etc/init.d/ip6neigh disable
}

#Prints the hosts file in a user friendly format.
list_hosts() {
	check_running
	check_files
	
	#Get the line number that divides the two sections of the hosts file
	local ln=$(grep -n '^#Discovered' "$HOSTS_FILE" | cut -d ':' -f1)
	
	case "$1" in
		#All hosts without comments or blank lines
		all)
			grep '^[^#]' "$HOSTS_FILE" |
				awk '{printf "%-30s %s %s\n",$2,$1,$3}' |
				sort
		;;
		#Only static hosts
		sta*)
			awk "NR>1&&NR<(${ln}-1)"' {printf "%-30s %s %s\n",$2,$1,$3}' "$HOSTS_FILE" |
				sort
		;;
		#Only discovered hosts
		dis*)
			awk "NR>${ln}"' {printf "%-30s %s %s\n",$2,$1,$3}' "$HOSTS_FILE" |
				sort
		;;
		#All hosts with comments
		'')
			echo "#Predefined hosts"
			awk "NR>1&&NR<(${ln}-1)"' {printf "%-30s %s %s\n",$2,$1,$3}' "$HOSTS_FILE" |
				sort
			echo -e "\n#Discovered hosts"
			awk "NR>${ln}"' {printf "%-30s %s %s\n",$2,$1,$3}' "$HOSTS_FILE" |
				sort
		;;
		#Invalid parameter
		*)	display_help;;
	esac
}

#Replaces '.' with '\.' in FQDN for not confusing grep.
escape_dots() {
	eval "$1=$(echo "'$2'" | sed 's/\./\\\./g')"
}

#Loads the domain name config.
load_domain() {
	DOMAIN=$(uci get ip6neigh.config.domain 2>/dev/null)
	if [ -z "$DOMAIN" ]; then
		DOMAIN=$(uci get dhcp.@dnsmasq[0].domain 2>/dev/null)
	fi
	if [ -z "$DOMAIN" ]; then DOMAIN='lan'; fi
}

#Displays the addresses for the supplied name
show_address() {
	check_running
	check_files
	
	#Prepare name for grep
	local name
	escape_dots name "$1"
	load_domain
	
	case "$2" in
		#Any number of addresses 
		'')
			grep -i -E " ${name}$|${name}\.${DOMAIN}$" "$HOSTS_FILE" | cut -d ' ' -f1
		;;
		#Limit to one address
		'1')
			grep -m 1 -i -E " ${name}$|${name}\.${DOMAIN}$" "$HOSTS_FILE" | cut -d ' ' -f1
		;;
		#Invalid parameter
		*) display_help;;
	esac
}

#Displays the name for the IPv6 or MAC address
show_name() {
	check_running
	check_files
	grep -m 1 -i "^$1 " "$HOSTS_FILE" | cut -d ' ' -f2
}

#Resolves name to address or address to name.
resolve() {
	#Check if it's an address
	echo "$1" | grep -q ':'
	if [ "$?" = 0 ]; then
		show_name "$1"
	else
		show_address "$1" "$2"
	fi
}

#Displays the simple name (no FQDN) for the address or all addresses for the simple name.
whois_this() {
	check_running
	check_files
	
	#Check if it's an address
	echo "$1" | grep -q ':'
	if [ "$?" = 0 ]; then
		#Check if it's a MAC address.
		echo "$1" | grep -q '..:..:..:..:..:..'
		if [ "$?" = 0 ]; then
			#Get name from the cache file
			grep -m 1 -i "^$1 " "$CACHE_FILE" | cut -d ' ' -f3
		else
			#Get name from the hosts file
			grep -m 1 -i "^$1 " "$HOSTS_FILE" |
				cut -d ' ' -f2 |
				cut -d '.' -f1
		fi
	else
		#Get the addresses from the hosts file
		grep -i -E " $1(\.|$)" "$HOSTS_FILE" |
			awk '{printf "%-30s %s %s\n",$2,$1,$3}' |
			sort
	fi
}

#This script file
CMD="$0"

#Checks which command was called.
case "$1" in
	'start')			start_service "$0";;
	'stop')				stop_service;;
	'restart'|'rst')	restart_service;;
	'enable')			enable_service;;
	'disable')			disable_service;;
	'list'|'lst')		list_hosts "$2";;
	'address'|'addr')	show_address "$2" "$3";;
	'name')				show_name "$2";;
	'resolve'|'res')	resolve "$2" "$3";;
	'whois'|'whos'|'who') whois_this "$2";;
	*)					display_help;;
esac
